From dd1afd41b3d7945e2daeb25bce9bc780ebce00c8 Mon Sep 17 00:00:00 2001
From: Matti Picus <matti.picus@gmail.com>
Date: Sun, 19 Jan 2025 21:34:44 +1100
Subject: [PATCH] remove dependencies and third-party package installs

---
 python/setup.py | 167 ++++++++----------------------------------------
 1 file changed, 27 insertions(+), 140 deletions(-)

diff --git a/python/setup.py b/python/setup.py
index c00c10942c..5ec49a4ecb 100644
--- a/python/setup.py
+++ b/python/setup.py
@@ -225,125 +225,23 @@ ray_files += [
 # also update the matching section of requirements/requirements.txt
 # in this directory
 if setup_spec.type == SetupType.RAY:
-    pandas_dep = "pandas >= 1.3"
-    numpy_dep = "numpy >= 1.20"
-    pyarrow_deps = [
-        "pyarrow >= 9.0.0",
-        "pyarrow <18; sys_platform == 'darwin' and platform_machine == 'x86_64'",
-    ]
     setup_spec.extras = {
-        "cgraph": [
-            "cupy-cuda12x; sys_platform != 'darwin'",
-        ],
-        "client": [
-            # The Ray client needs a specific range of gRPC to work:
-            # Tracking issues: https://github.com/grpc/grpc/issues/33714
-            "grpcio != 1.56.0; sys_platform == 'darwin'",
-            "grpcio",
-        ],
-        "data": [
-            numpy_dep,
-            pandas_dep,
-            *pyarrow_deps,
-            "fsspec",
-        ],
-        "default": [
-            # If adding dependencies necessary to launch the dashboard api server,
-            # please add it to python/ray/dashboard/optional_deps.py as well.
-            "aiohttp >= 3.7",
-            "aiohttp_cors",
-            "colorful",
-            "py-spy >= 0.2.0; python_version < '3.12'",  # noqa:E501
-            "py-spy >= 0.4.0; python_version >= '3.12'",  # noqa:E501
-            "requests",
-            "grpcio >= 1.32.0; python_version < '3.10'",  # noqa:E501
-            "grpcio >= 1.42.0; python_version >= '3.10'",  # noqa:E501
-            "opencensus",
-            "pydantic!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,<3",
-            "prometheus_client >= 0.7.1",
-            "smart_open",
-            "virtualenv >=20.0.24, !=20.21.1",  # For pip runtime env.
-        ],
-        "observability": [
-            "opentelemetry-api",
-            "opentelemetry-sdk",
-            "opentelemetry-exporter-otlp",
-            "memray; sys_platform != 'win32'",
-        ],
-        "serve": [
-            "uvicorn[standard]",
-            "requests",
-            "starlette",
-            "fastapi",
-            "watchfiles",
-        ],
-        "tune": [
-            "pandas",
-            "tensorboardX>=1.9",
-            "requests",
-            *pyarrow_deps,
-            "fsspec",
-        ],
+        "cgraph": [],
+        "air": [],
+        "client": [],
+        "data": [],
+        "default": [],
+        "observability": [],
+        "rllib": [],
+        "serve": [],
+        "serve-grpc": [],
+        "tune": [],
+        "train": [],
     }
 
-    # Both "adag" and "cgraph" are for Compiled Graphs.
-    # "adag" is deprecated and will be removed in the future.
-    setup_spec.extras["adag"] = list(setup_spec.extras["cgraph"])
-
-    # Ray Serve depends on the Ray dashboard components.
-    setup_spec.extras["serve"] = list(
-        set(setup_spec.extras["serve"] + setup_spec.extras["default"])
-    )
-
-    # Ensure gRPC library exists for Ray Serve gRPC support.
-    setup_spec.extras["serve-grpc"] = list(
-        set(
-            setup_spec.extras["serve"]
-            + [
-                "grpcio >= 1.32.0; python_version < '3.10'",  # noqa:E501
-                "grpcio >= 1.42.0; python_version >= '3.10'",  # noqa:E501
-                "pyOpenSSL",
-            ]
-        )
-    )
-
-    if RAY_EXTRA_CPP:
-        setup_spec.extras["cpp"] = ["ray-cpp==" + setup_spec.version]
-
-    setup_spec.extras["rllib"] = setup_spec.extras["tune"] + [
-        "dm_tree",
-        "gymnasium==1.0.0",
-        "lz4",
-        "ormsgpack==1.7.0",
-        "pyyaml",
-        "scipy",
-    ]
-
-    setup_spec.extras["train"] = setup_spec.extras["tune"]
-
-    # Ray AI Runtime should encompass Data, Tune, and Serve.
-    setup_spec.extras["air"] = list(
-        set(
-            setup_spec.extras["tune"]
-            + setup_spec.extras["data"]
-            + setup_spec.extras["train"]
-            + setup_spec.extras["serve"]
-        )
-    )
-
-    # "all" will not include "cpp" anymore. It is a big depedendency
-    # that most people do not need.
-    #
-    # Instead, when cpp is supported, we add a "all-cpp".
     setup_spec.extras["all"] = list(
-        set(
-            chain.from_iterable([v for k, v in setup_spec.extras.items() if k != "cpp"])
-        )
+        set(chain.from_iterable(setup_spec.extras.values()))
     )
-    if RAY_EXTRA_CPP:
-        setup_spec.extras["all-cpp"] = list(
-            set(setup_spec.extras["all"] + setup_spec.extras["cpp"])
-        )
 
 # These are the main dependencies for users of ray. This list
 # should be carefully curated. If you change it, please reflect
@@ -353,18 +251,7 @@ if setup_spec.type == SetupType.RAY:
 # install-core-prerelease-dependencies.sh so we can test
 # new releases candidates.
 if setup_spec.type == SetupType.RAY:
-    setup_spec.install_requires = [
-        "click >= 7.0",
-        "filelock",
-        "jsonschema",
-        "msgpack >= 1.0.0, < 2.0.0",
-        "packaging",
-        "protobuf >= 3.15.3, != 3.19.5",
-        "pyyaml",
-        "aiosignal",
-        "frozenlist",
-        "requests",
-    ]
+    setup_spec.install_requires = []
 
 
 def is_native_windows_or_msys():
@@ -554,19 +441,19 @@ def build(build_python, build_java, build_cpp):
             env=dict(os.environ, CC="gcc"),
         )
 
-    # runtime env agent dependenceis
-    runtime_env_agent_pip_packages = ["aiohttp"]
-    subprocess.check_call(
-        [
-            sys.executable,
-            "-m",
-            "pip",
-            "install",
-            "-q",
-            "--target=" + os.path.join(ROOT_DIR, RUNTIME_ENV_AGENT_THIRDPARTY_SUBDIR),
-        ]
-        + runtime_env_agent_pip_packages
-    )
+        # runtime env agent dependenceis
+        runtime_env_agent_pip_packages = ["aiohttp"]
+        subprocess.check_call(
+            [
+                sys.executable,
+                "-m",
+                "pip",
+                "install",
+                "-q",
+                "--target=" + os.path.join(ROOT_DIR, RUNTIME_ENV_AGENT_THIRDPARTY_SUBDIR),
+            ]
+            + runtime_env_agent_pip_packages
+        )
 
     bazel_flags = ["--verbose_failures"]
     if BAZEL_ARGS:
@@ -789,7 +676,7 @@ setuptools.setup(
     # The BinaryDistribution argument triggers build_ext.
     distclass=BinaryDistribution,
     install_requires=setup_spec.install_requires,
-    setup_requires=["cython >= 0.29.32", "wheel"],
+    setup_requires=[],
     extras_require=setup_spec.extras,
     entry_points={
         "console_scripts": [
-- 
2.39.5 (Apple Git-154)

